# This tutorial shows how to generate a symmetrizer
# and then use it to generate a Wannier90 output.
# It uses Irrep, and may be used with any DFT code that is supported by Irrep (QE, VASP, AINIT, ...)

import os
from matplotlib import pyplot as plt
import numpy as np
import wannierberri as wberri
from wannierberri.symmetry.sawf import SymmetrizerSAWF
from wannierberri.symmetry.projections import Projection, ProjectionsSet
from wannierberri.w90files.amn import amn_from_bandstructure




systems = {}

# for data_dir in ['diamond', 'diamond-444']:
for data_dir in ['diamond-444']:
    from irrep.bandstructure import BandStructure
    bandstructure = BandStructure(code='espresso',
                                prefix=os.path.join("../../tests/data", data_dir, "di"),
                                Ecut=200,
                                normalize=False, include_TR=False)
    spacegroup = bandstructure.spacegroup

    # pos_bond = [[0,0,0]] # only one position is enouggh, the other 4 sites are generated by symmetry
    pos_bond = [[0, 0, 0], [0, 0, 1 / 2], [0, 1 / 2, 0], [1 / 2, 0, 0]]  # but it is allowed to specify all 4 to preserve the order and selection of the unit cell

    pos_atom = np.array([[-1, -1, -1], [1, 1, 1]]) / 8
    zaxis_bond = (pos_atom[1] - pos_atom[0]) @ spacegroup.lattice
    proj_s_bond = Projection(position_num=pos_bond, orbital='s', spacegroup=spacegroup)
    proj_sp3 = Projection(position_num=pos_atom, orbital='sp3', spacegroup=spacegroup, rotate_basis=True)
    proj_p_bond = Projection(position_num=pos_bond, orbital='pz', zaxis=zaxis_bond, spacegroup=spacegroup, rotate_basis=True)


    for projname in ['s_bond', 'p_bond', 'sp_bond', 'sp3']:
        # for projname in ['sp3']:
        if projname == 's_bond':
            projset = ProjectionsSet([proj_s_bond])
            froz_min = -10
            froz_max = 23
            win_min = -10
            win_max = 23
        elif projname == 'sp3':
            projset = ProjectionsSet([proj_sp3])
            froz_min = -10
            froz_max = 30
            win_min = -10
            win_max = 1000
        elif projname == 'sp_bond':
            projset = ProjectionsSet([proj_p_bond, proj_s_bond])
            froz_min = -10
            froz_max = 30
            win_min = -10
            win_max = 1000
        elif projname == 'p_bond':
            projset = ProjectionsSet([proj_p_bond])
            froz_min = 23
            froz_max = 30
            win_min = 23
            win_max = 1000
        else:
            raise ValueError(f"Unknown system name: {projname}")

        symmetrizer = SymmetrizerSAWF().from_irrep(bandstructure)
        symmetrizer.set_D_wann_from_projections(projections=projset)
        print("D_wann\n", symmetrizer.D_wann_blocks)

        amn = amn_from_bandstructure(bandstructure, projections=projset)

        w90data = wberri.w90files.Wannier90data(seedname='../../tests/data/' + data_dir + '/diamond', readfiles=['mmn', 'eig', 'win'], read_npz=False)
        w90data.set_file("amn", amn)
        # w90data.set_symmetrizer(symmetrizer)
        # w90data.select_bands(win_min=win_min, win_max=win_max)

        w90data.wannierise(
            froz_min=froz_min,
            froz_max=froz_max,
            num_iter=1000,
            conv_tol=1e-10,
            print_progress_every=20,
            sitesym=False,
            localise=True,
        )

        systems[data_dir + "-" + projname] = wberri.system.System_w90(w90data=w90data)

system = list(systems.values())[0]
# Now calculate bandstructure

# L 0.50000  0.50000 0.5000 G 0.00000  0.00000 0.0000
# G 0.00000  0.00000 0.0000 X 0.50000  0.00000 0.5000
# X 0.50000 -0.50000 0.0000 K 0.37500 -0.37500 0.0000
# K 0.37500 -0.37500 0.0000 G 0.00000  0.00000 0.0000
# esite

path = wberri.Path(system, nodes=[[1 / 2, 0, 0],
                [0, 0, 0],
    [1 / 2, 0, 1 / 2],
    [3 / 8, -3 / 8, 0],
    [0, 0, 0]], labels=['L', 'G', 'X', 'K', 'G'], length=200)
tabulator = wberri.calculators.TabulatorAll(tabulators={}, mode='path')
calculators = {'tabulate': tabulator}

colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown'][-1::-1]
for projname in systems.keys():
    system = systems[projname]
    result = wberri.run(system, grid=path, calculators=calculators, print_Kpoints=False)
    result.results['tabulate'].plot_path_fat(path,
                                            close_fig=False,
                                            show_fig=False,
                                            linecolor=colors.pop(0),
                                            label=projname,
                                            # kwargs_line={'linestyle':'--' if projname == 'sp_bond' else '-',}
                                            )

plt.ylim(-10, 50)
plt.savefig('diamond.pdf')
